create database ORG;
USE ORG;

Create table Customers (
CustomerID int primary key,
name varchar(255),
Email varchar(255),
joindate date);

Create table Products (
 productID int primary key,
 name varchar(255),
 category varchar(255),
 price decimal(10,2));

Create table Orders (
orderID int primary key,
customerID int,
orderDate date,
TotalAmount decimal(10, 2),
foreign key (customerID) references customers(CustomerID));

Create table orderdetails (
orderDetailID INT Primary Key,
OrderID int,
ProductID int,
Quantity int,
PricePerUnit Decimal(10, 2),
Foreign key(orderID) References Orders(OrderID),
Foreign key(ProductID) References Products(ProductID));

Insert into Customers (CustomerID, Name, Email, JoinDate) values
(1, 'John Doe', 'johndoe@example.com','2020-01-10'),
(2, 'Jane Smith','janesmith@example.com','2020-01-15'),
(3, 'Alice Johnson','alicejohnson@example.com','2020-03-05');

INSERT INTO Products (ProductID, Name, Category, Price) VALUES
 (1, 'Laptop', 'Electronics', 999.99),
 (2, 'Smartphone', 'Electronics', 499.99),-- ... Additional 7 records ...
 (10, 'Desk Lamp', 'Home Decor', 29.99);
 
 Insert into Orders (OrderID, CustomerID, OrderDate, TotalAmount) VALUES
 (1,1, '2020-02-15', 1499.98),
 (2,2, '2020-02-17', 499.99), -- ...Additional 7 records ...
 (10, 25, '2020-03-21', 78.99);
 

INSERT INTO Orders (OrderID, CustomerID, OrderDate, TotalAmount)
 VALUES
 (1, 1, '2020-02-15', 1499.98),
 (2, 2, '2020-02-17', 499.99),-- ... Additional 7 records ...
 (10, 25, '2020-03-21', 78.99);
 
 INSERT INTO orderdetails (orderdetailID, orderID, ProductID, Quantity,
 PricePerUnit) VALUES
 (1, 1, 1, 1, 999.99),
 (2, 1, 2, 1, 499.99),-- ... Additional 7 records ...
 (10, 25, 50, 2, 29.99);
 
 -- Basic Queries ---
 
  -- List all customers.--
  
Select * from Customers;
-- Show all products in the 'Electronics' category.--
SELECT * FROM Products WHERE Category = 'Electronics';
--  Find the total number of orders placed--
SELECT COUNT(*) AS TotalOrders FROM Orders;
--  Display the details of the most recent order.
SELECT * FROM Orders ORDER BY OrderDate DESC LIMIT 1;
-- Joins and Relationships:
-- List all products along with the names of the customers who ordered them
 SELECT 
    ProductID,
    ProductName,
    CustomerName
FROM 
    Products p
JOIN 
    OrderDetails od ON ProductID = ProductID
JOIN 
    Orders o ON OrderID = OrderID
JOIN 
    Customers c ON o.CustomerID = c.CustomerID;
-- Show orders that include more than one product.
SELECT 
    OrderID,
    COUNT(*) AS NumberOfProducts
FROM 
    OrderDetails
GROUP BY 
    OrderID
HAVING 
    COUNT(*) > 1;
-- Find the total sales amount for each customer.
SELECT 
    c.CustomerID,
    c.CustomerName,
    SUM(od.Quantity * p.UnitPrice) AS TotalSalesAmount
FROM 
    Customers c
JOIN 
    Orders o ON c.CustomerID = o.CustomerID
JOIN 
    OrderDetails od ON o.OrderID = od.OrderID
JOIN 
    Products p ON od.ProductID = p.ProductID
GROUP BY 
    c.CustomerID, c.CustomerName;

-- Calculate the total revenue generated by each product category.
SELECT 
    p.Category,
    SUM(od.Quantity * od.UnitPrice) AS TotalRevenue
FROM 
    Products p
JOIN 
    OrderDetails od ON p.ProductID = od.ProductID
GROUP BY 
    p.Category;
    
    -- determine the average order value:
SELECT 
    AVG(TotalOrderValue) AS AverageOrderValue
FROM 
    (
    SELECT 
        OrderID,
        SUM(Quantity * UnitPrice) AS TotalOrderValue
    FROM 
        OrderDetails
    GROUP BY 
        OrderID
    ) AS OrderValues;

--  Find the month with the highest number of orders:-- 

SELECT 
    EXTRACT(MONTH FROM OrderDate) AS Month,
    COUNT(*) AS NumberOfOrders
FROM 
    Orders
GROUP BY 
    EXTRACT(MONTH FROM OrderDate)
ORDER BY 
    NumberOfOrders DESC
LIMIT 1;

-- Identify customers who have not placed any orders:--

SELECT 
    CustomerID,
    CustomerName
FROM 
    Customers
WHERE 
    CustomerID NOT IN (SELECT DISTINCT CustomerID FROM Orders);

-- Find products that have never been ordered:

SELECT 
    ProductID,
    ProductName
FROM 
    Products
WHERE 
    ProductID NOT IN (SELECT DISTINCT ProductID FROM OrderDetails);

-- Show the top 3 best-selling products:
SELECT 
    ProductID,
    ProductName,
    SUM(Quantity) AS TotalQuantitySold
FROM 
    OrderDetails
GROUP BY 
    ProductID, ProductName
ORDER BY 
    TotalQuantitySold DESC
LIMIT 3;

-- List orders placed in the last month:--
SELECT 
    *
FROM 
    Orders
WHERE 
    OrderDate >= DATE_SUB(CURDATE(), INTERVAL 1 MONTH);

-- Determine the oldest customer in terms of membership duration:--
SELECT 
    CustomerID,
    CustomerName,
    DATEDIFF(CURDATE(), JoinDate) AS MembershipDuration
FROM 
    Customers
ORDER BY 
    JoinDate ASC
LIMIT 1;

-- Rank customers based on their total spending:-- 
SELECT 
    CustomerID,
    CustomerName,
    SUM(od.Quantity * od.UnitPrice) AS TotalSpending,
    RANK() OVER (ORDER BY SUM(od.Quantity * od.UnitPrice) DESC) AS SpendingRank
FROM 
    Customers c
JOIN 
    Orders o ON c.CustomerID = o.CustomerID
JOIN 
    OrderDetails od ON o.OrderID = od.OrderID
GROUP BY 
    CustomerID, CustomerName
ORDER BY 
    TotalSpending DESC;

-- Identify the most popular product category:--

SELECT 
    Category,
    COUNT(*) AS TotalOrders
FROM 
    Products p
JOIN 
    OrderDetails od ON p.ProductID = od.ProductID
GROUP BY 
    Category
ORDER BY 
    TotalOrders DESC
LIMIT 1;

-- Calculate the month-over-month growth rate in sales:--

SELECT 
    EXTRACT(YEAR_MONTH FROM OrderDate) AS YearMonth,
    SUM(Quantity * UnitPrice) AS MonthlySales,
    (SUM(Quantity * UnitPrice) - LAG(SUM(Quantity * UnitPrice)) OVER (ORDER BY EXTRACT(YEAR_MONTH FROM OrderDate))) / LAG(SUM(Quantity * UnitPrice)) OVER (ORDER BY EXTRACT(YEAR_MONTH FROM OrderDate)) AS GrowthRate
FROM 
    OrderDetails
GROUP BY 
    YearMonth;
    
    -- Add a new customer to the Customers table:--
    INSERT INTO Customers (CustomerName, Email, JoinDate)
VALUES ('New Customer', 'newcustomer@example.com', CURDATE());

-- Update the price of a specific product:--

UPDATE Products
SET UnitPrice = <new_price>
WHERE ProductID = <product_id>;


    

